/*!
 * template-toc <https://github.com/jonschlinkert/template-toc>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

'use strict';

/* deps:mocha */
var should = require('should');
var Template = require('template');
var toc = require('./');
var template;

describe('toc', function () {
  beforeEach(function () {
    template = new Template();
    template.page('fixtures/basic.md');
    template.partial('fixtures/doc.md');
  });

  it('should work as an onLoad middleware:', function (done) {
    template.onLoad(/\.md$/, toc(template));
    // with `.onLoad()`, we need to load the templates AFTER the
    // middleware is defined. other stages it doesn't matter
    template.page('fixtures/basic.md');
    template.partial('fixtures/doc.md');

    // render `./fixtures/basic.md`
    template.render('basic.md', function (err, content) {
      if (err) console.log(err);
      content.should.equal([
        '# Basic markdown',
        '',
        '> This is a block quote',
        '',
        '<!-- toc -->',
        '',
        '- [AAA](#aaa)',
        '',
        '<!-- tocstop -->',
        '',
        '## AAA',
        '',
        'This is aaa.',
        '',
        '### BBB',
        'This is bbb.',
        '',
        '#### CCC',
        'This is ccc.',
        '',
        '##### DDD',
        'This is ddd.\n'
      ].join('\n'));
      done();
    });
  });

  it('should work as a preRender middleware:', function (done) {
    template.preRender(/\.md$/, toc(template));
    template.page('fixtures/basic.md');
    template.partial('fixtures/doc.md');

    // render `./fixtures/basic.md`
    template.render('basic.md', function (err, content) {
      if (err) console.log(err);

      content.should.equal([
        '# Basic markdown',
        '',
        '> This is a block quote',
        '',
        '<!-- toc -->',
        '',
        '- [AAA](#aaa)',
        '',
        '<!-- tocstop -->',
        '',
        '## AAA',
        '',
        'This is aaa.',
        '',
        '### BBB',
        'This is bbb.',
        '',
        '#### CCC',
        'This is ccc.',
        '',
        '##### DDD',
        'This is ddd.\n'
      ].join('\n'));
      done();
    });
  });

  it('should work as a postRender middleware:', function (done) {
    template.postRender(/\.md$/, toc(template));

    // render `./fixtures/basic.md`
    template.render('basic.md', function (err, content) {
      if (err) console.log(err);
      content.should.equal([
        '# Basic markdown',
        '',
        '> This is a block quote',
        '',
        '<!-- toc -->',
        '',
        '- [AAA](#aaa)',
        '  * [BBB](#bbb)',
        '    + [CCC](#ccc)',
        '      ~ [DDD](#ddd)',
        '',
        '<!-- tocstop -->',
        '',
        '## AAA',
        '',
        'This is aaa.',
        '',
        '### BBB',
        'This is bbb.',
        '',
        '#### CCC',
        'This is ccc.',
        '',
        '##### DDD',
        'This is ddd.',
      ].join('\n'));
      done();
    });
  });

  it('should use options from template:', function (done) {
    template.option({
      toc: {
        append: '\n\n_(Table of contents generated by [verb])_',
        ignore: ['BBB']
      }
    });

    template.page('fixtures/basic.md');
    template.partial('fixtures/doc.md');
    template.postRender(/\.md$/, toc(template));

    // render `./fixtures/basic.md`
    template.render('basic.md', function (err, content) {
      if (err) console.log(err);
      content.should.equal([
        '# Basic markdown',
        '',
        '> This is a block quote',
        '',
        '<!-- toc -->',
        '',
        '- [AAA](#aaa)',
        '    + [CCC](#ccc)',
        '      ~ [DDD](#ddd)',
        '',
        '_(Table of contents generated by [verb])_',
        '',
        '<!-- tocstop -->',
        '',
        '## AAA',
        '',
        'This is aaa.',
        '',
        '### BBB',
        'This is bbb.',
        '',
        '#### CCC',
        'This is ccc.',
        '',
        '##### DDD',
        'This is ddd.',
      ].join('\n'));
      done();
    });
  });

});
